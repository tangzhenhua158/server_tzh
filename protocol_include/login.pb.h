// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: login.proto

#ifndef PROTOBUF_login_2eproto__INCLUDED
#define PROTOBUF_login_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace user {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_login_2eproto();
void protobuf_AssignDesc_login_2eproto();
void protobuf_ShutdownFile_login_2eproto();

class LoginReq;
class LoginRsp;
class LoginOutReq;
class LoginOutRsp;

// ===================================================================

class LoginReq : public ::google::protobuf::Message {
 public:
  LoginReq();
  virtual ~LoginReq();

  LoginReq(const LoginReq& from);

  inline LoginReq& operator=(const LoginReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginReq& default_instance();

  void Swap(LoginReq* other);

  // implements Message ----------------------------------------------

  LoginReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginReq& from);
  void MergeFrom(const LoginReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::int64 uid() const;
  inline void set_uid(::google::protobuf::int64 value);

  // required string userName = 2;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUserNameFieldNumber = 2;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  inline void set_allocated_username(::std::string* username);

  // repeated string userPasswd = 3;
  inline int userpasswd_size() const;
  inline void clear_userpasswd();
  static const int kUserPasswdFieldNumber = 3;
  inline const ::std::string& userpasswd(int index) const;
  inline ::std::string* mutable_userpasswd(int index);
  inline void set_userpasswd(int index, const ::std::string& value);
  inline void set_userpasswd(int index, const char* value);
  inline void set_userpasswd(int index, const char* value, size_t size);
  inline ::std::string* add_userpasswd();
  inline void add_userpasswd(const ::std::string& value);
  inline void add_userpasswd(const char* value);
  inline void add_userpasswd(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& userpasswd() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_userpasswd();

  // @@protoc_insertion_point(class_scope:user.LoginReq)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_username();
  inline void clear_has_username();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 uid_;
  ::std::string* username_;
  ::google::protobuf::RepeatedPtrField< ::std::string> userpasswd_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();

  void InitAsDefaultInstance();
  static LoginReq* default_instance_;
};
// -------------------------------------------------------------------

class LoginRsp : public ::google::protobuf::Message {
 public:
  LoginRsp();
  virtual ~LoginRsp();

  LoginRsp(const LoginRsp& from);

  inline LoginRsp& operator=(const LoginRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginRsp& default_instance();

  void Swap(LoginRsp* other);

  // implements Message ----------------------------------------------

  LoginRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginRsp& from);
  void MergeFrom(const LoginRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::int64 uid() const;
  inline void set_uid(::google::protobuf::int64 value);

  // required int32 status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);

  // required string username = 3;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUsernameFieldNumber = 3;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  inline void set_allocated_username(::std::string* username);

  // @@protoc_insertion_point(class_scope:user.LoginRsp)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_username();
  inline void clear_has_username();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 uid_;
  ::std::string* username_;
  ::google::protobuf::int32 status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();

  void InitAsDefaultInstance();
  static LoginRsp* default_instance_;
};
// -------------------------------------------------------------------

class LoginOutReq : public ::google::protobuf::Message {
 public:
  LoginOutReq();
  virtual ~LoginOutReq();

  LoginOutReq(const LoginOutReq& from);

  inline LoginOutReq& operator=(const LoginOutReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginOutReq& default_instance();

  void Swap(LoginOutReq* other);

  // implements Message ----------------------------------------------

  LoginOutReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginOutReq& from);
  void MergeFrom(const LoginOutReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::int64 uid() const;
  inline void set_uid(::google::protobuf::int64 value);

  // required string userName = 2;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUserNameFieldNumber = 2;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  inline void set_allocated_username(::std::string* username);

  // @@protoc_insertion_point(class_scope:user.LoginOutReq)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_username();
  inline void clear_has_username();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 uid_;
  ::std::string* username_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();

  void InitAsDefaultInstance();
  static LoginOutReq* default_instance_;
};
// -------------------------------------------------------------------

class LoginOutRsp : public ::google::protobuf::Message {
 public:
  LoginOutRsp();
  virtual ~LoginOutRsp();

  LoginOutRsp(const LoginOutRsp& from);

  inline LoginOutRsp& operator=(const LoginOutRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginOutRsp& default_instance();

  void Swap(LoginOutRsp* other);

  // implements Message ----------------------------------------------

  LoginOutRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginOutRsp& from);
  void MergeFrom(const LoginOutRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::int64 uid() const;
  inline void set_uid(::google::protobuf::int64 value);

  // required int32 status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);

  // required string username = 3;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUsernameFieldNumber = 3;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  inline void set_allocated_username(::std::string* username);

  // @@protoc_insertion_point(class_scope:user.LoginOutRsp)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_username();
  inline void clear_has_username();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 uid_;
  ::std::string* username_;
  ::google::protobuf::int32 status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();

  void InitAsDefaultInstance();
  static LoginOutRsp* default_instance_;
};
// ===================================================================

class LoginService_Stub;

class LoginService : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline LoginService() {};
 public:
  virtual ~LoginService();

  typedef LoginService_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void Login(::google::protobuf::RpcController* controller,
                       const ::user::LoginReq* request,
                       ::user::LoginRsp* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(LoginService);
};

class LoginService_Stub : public LoginService {
 public:
  LoginService_Stub(::google::protobuf::RpcChannel* channel);
  LoginService_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~LoginService_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements LoginService ------------------------------------------

  void Login(::google::protobuf::RpcController* controller,
                       const ::user::LoginReq* request,
                       ::user::LoginRsp* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(LoginService_Stub);
};


// -------------------------------------------------------------------

class LoginOutService_Stub;

class LoginOutService : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline LoginOutService() {};
 public:
  virtual ~LoginOutService();

  typedef LoginOutService_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void LoginOut(::google::protobuf::RpcController* controller,
                       const ::user::LoginOutReq* request,
                       ::user::LoginOutRsp* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(LoginOutService);
};

class LoginOutService_Stub : public LoginOutService {
 public:
  LoginOutService_Stub(::google::protobuf::RpcChannel* channel);
  LoginOutService_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~LoginOutService_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements LoginOutService ------------------------------------------

  void LoginOut(::google::protobuf::RpcController* controller,
                       const ::user::LoginOutReq* request,
                       ::user::LoginOutRsp* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(LoginOutService_Stub);
};


// ===================================================================


// ===================================================================

// LoginReq

// required int64 uid = 1;
inline bool LoginReq::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginReq::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginReq::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginReq::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::int64 LoginReq::uid() const {
  return uid_;
}
inline void LoginReq::set_uid(::google::protobuf::int64 value) {
  set_has_uid();
  uid_ = value;
}

// required string userName = 2;
inline bool LoginReq::has_username() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoginReq::set_has_username() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoginReq::clear_has_username() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoginReq::clear_username() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& LoginReq::username() const {
  return *username_;
}
inline void LoginReq::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void LoginReq::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void LoginReq::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginReq::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  return username_;
}
inline ::std::string* LoginReq::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LoginReq::set_allocated_username(::std::string* username) {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (username) {
    set_has_username();
    username_ = username;
  } else {
    clear_has_username();
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated string userPasswd = 3;
inline int LoginReq::userpasswd_size() const {
  return userpasswd_.size();
}
inline void LoginReq::clear_userpasswd() {
  userpasswd_.Clear();
}
inline const ::std::string& LoginReq::userpasswd(int index) const {
  return userpasswd_.Get(index);
}
inline ::std::string* LoginReq::mutable_userpasswd(int index) {
  return userpasswd_.Mutable(index);
}
inline void LoginReq::set_userpasswd(int index, const ::std::string& value) {
  userpasswd_.Mutable(index)->assign(value);
}
inline void LoginReq::set_userpasswd(int index, const char* value) {
  userpasswd_.Mutable(index)->assign(value);
}
inline void LoginReq::set_userpasswd(int index, const char* value, size_t size) {
  userpasswd_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginReq::add_userpasswd() {
  return userpasswd_.Add();
}
inline void LoginReq::add_userpasswd(const ::std::string& value) {
  userpasswd_.Add()->assign(value);
}
inline void LoginReq::add_userpasswd(const char* value) {
  userpasswd_.Add()->assign(value);
}
inline void LoginReq::add_userpasswd(const char* value, size_t size) {
  userpasswd_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
LoginReq::userpasswd() const {
  return userpasswd_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
LoginReq::mutable_userpasswd() {
  return &userpasswd_;
}

// -------------------------------------------------------------------

// LoginRsp

// required int64 uid = 1;
inline bool LoginRsp::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginRsp::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginRsp::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginRsp::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::int64 LoginRsp::uid() const {
  return uid_;
}
inline void LoginRsp::set_uid(::google::protobuf::int64 value) {
  set_has_uid();
  uid_ = value;
}

// required int32 status = 2;
inline bool LoginRsp::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoginRsp::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoginRsp::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoginRsp::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 LoginRsp::status() const {
  return status_;
}
inline void LoginRsp::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}

// required string username = 3;
inline bool LoginRsp::has_username() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LoginRsp::set_has_username() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LoginRsp::clear_has_username() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LoginRsp::clear_username() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& LoginRsp::username() const {
  return *username_;
}
inline void LoginRsp::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void LoginRsp::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void LoginRsp::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginRsp::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  return username_;
}
inline ::std::string* LoginRsp::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LoginRsp::set_allocated_username(::std::string* username) {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (username) {
    set_has_username();
    username_ = username;
  } else {
    clear_has_username();
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// LoginOutReq

// required int64 uid = 1;
inline bool LoginOutReq::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginOutReq::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginOutReq::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginOutReq::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::int64 LoginOutReq::uid() const {
  return uid_;
}
inline void LoginOutReq::set_uid(::google::protobuf::int64 value) {
  set_has_uid();
  uid_ = value;
}

// required string userName = 2;
inline bool LoginOutReq::has_username() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoginOutReq::set_has_username() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoginOutReq::clear_has_username() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoginOutReq::clear_username() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& LoginOutReq::username() const {
  return *username_;
}
inline void LoginOutReq::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void LoginOutReq::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void LoginOutReq::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginOutReq::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  return username_;
}
inline ::std::string* LoginOutReq::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LoginOutReq::set_allocated_username(::std::string* username) {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (username) {
    set_has_username();
    username_ = username;
  } else {
    clear_has_username();
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// LoginOutRsp

// required int64 uid = 1;
inline bool LoginOutRsp::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginOutRsp::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginOutRsp::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginOutRsp::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::int64 LoginOutRsp::uid() const {
  return uid_;
}
inline void LoginOutRsp::set_uid(::google::protobuf::int64 value) {
  set_has_uid();
  uid_ = value;
}

// required int32 status = 2;
inline bool LoginOutRsp::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoginOutRsp::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoginOutRsp::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoginOutRsp::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 LoginOutRsp::status() const {
  return status_;
}
inline void LoginOutRsp::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}

// required string username = 3;
inline bool LoginOutRsp::has_username() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LoginOutRsp::set_has_username() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LoginOutRsp::clear_has_username() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LoginOutRsp::clear_username() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& LoginOutRsp::username() const {
  return *username_;
}
inline void LoginOutRsp::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void LoginOutRsp::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void LoginOutRsp::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginOutRsp::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  return username_;
}
inline ::std::string* LoginOutRsp::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LoginOutRsp::set_allocated_username(::std::string* username) {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (username) {
    set_has_username();
    username_ = username;
  } else {
    clear_has_username();
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace user

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_login_2eproto__INCLUDED
