// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: daemon.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "daemon.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace daemon {

namespace {

const ::google::protobuf::Descriptor* serverInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  serverInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* registerReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  registerReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* registerRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  registerRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* loginOutReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  loginOutReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* loginOutRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  loginOutRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* heartReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  heartReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* heartRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  heartRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* queryServerReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  queryServerReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* queryServerRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  queryServerRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* queryDaemonMasterReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  queryDaemonMasterReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* queryDaemonMasterRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  queryDaemonMasterRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* syncToServerReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  syncToServerReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* syncToServerRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  syncToServerRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* electionMasterReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  electionMasterReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* electionMasterRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  electionMasterRsp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* daemon_msg_ret_descriptor_ = NULL;
const ::google::protobuf::ServiceDescriptor* DaemonService_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_daemon_2eproto() {
  protobuf_AddDesc_daemon_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "daemon.proto");
  GOOGLE_CHECK(file != NULL);
  serverInfo_descriptor_ = file->message_type(0);
  static const int serverInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(serverInfo, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(serverInfo, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(serverInfo, servername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(serverInfo, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(serverInfo, extend_),
  };
  serverInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      serverInfo_descriptor_,
      serverInfo::default_instance_,
      serverInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(serverInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(serverInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(serverInfo));
  registerReq_descriptor_ = file->message_type(1);
  static const int registerReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(registerReq, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(registerReq, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(registerReq, servername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(registerReq, extend_),
  };
  registerReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      registerReq_descriptor_,
      registerReq::default_instance_,
      registerReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(registerReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(registerReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(registerReq));
  registerRsp_descriptor_ = file->message_type(2);
  static const int registerRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(registerRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(registerRsp, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(registerRsp, servername_),
  };
  registerRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      registerRsp_descriptor_,
      registerRsp::default_instance_,
      registerRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(registerRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(registerRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(registerRsp));
  loginOutReq_descriptor_ = file->message_type(3);
  static const int loginOutReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(loginOutReq, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(loginOutReq, servername_),
  };
  loginOutReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      loginOutReq_descriptor_,
      loginOutReq::default_instance_,
      loginOutReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(loginOutReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(loginOutReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(loginOutReq));
  loginOutRsp_descriptor_ = file->message_type(4);
  static const int loginOutRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(loginOutRsp, ret_),
  };
  loginOutRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      loginOutRsp_descriptor_,
      loginOutRsp::default_instance_,
      loginOutRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(loginOutRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(loginOutRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(loginOutRsp));
  heartReq_descriptor_ = file->message_type(5);
  static const int heartReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(heartReq, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(heartReq, servername_),
  };
  heartReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      heartReq_descriptor_,
      heartReq::default_instance_,
      heartReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(heartReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(heartReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(heartReq));
  heartRsp_descriptor_ = file->message_type(6);
  static const int heartRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(heartRsp, ret_),
  };
  heartRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      heartRsp_descriptor_,
      heartRsp::default_instance_,
      heartRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(heartRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(heartRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(heartRsp));
  queryServerReq_descriptor_ = file->message_type(7);
  static const int queryServerReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryServerReq, servername_),
  };
  queryServerReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      queryServerReq_descriptor_,
      queryServerReq::default_instance_,
      queryServerReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryServerReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryServerReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(queryServerReq));
  queryServerRsp_descriptor_ = file->message_type(8);
  static const int queryServerRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryServerRsp, serinfos_),
  };
  queryServerRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      queryServerRsp_descriptor_,
      queryServerRsp::default_instance_,
      queryServerRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryServerRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryServerRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(queryServerRsp));
  queryDaemonMasterReq_descriptor_ = file->message_type(9);
  static const int queryDaemonMasterReq_offsets_[1] = {
  };
  queryDaemonMasterReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      queryDaemonMasterReq_descriptor_,
      queryDaemonMasterReq::default_instance_,
      queryDaemonMasterReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryDaemonMasterReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryDaemonMasterReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(queryDaemonMasterReq));
  queryDaemonMasterRsp_descriptor_ = file->message_type(10);
  static const int queryDaemonMasterRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryDaemonMasterRsp, serinfo_),
  };
  queryDaemonMasterRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      queryDaemonMasterRsp_descriptor_,
      queryDaemonMasterRsp::default_instance_,
      queryDaemonMasterRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryDaemonMasterRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryDaemonMasterRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(queryDaemonMasterRsp));
  syncToServerReq_descriptor_ = file->message_type(11);
  static const int syncToServerReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(syncToServerReq, serinfo_),
  };
  syncToServerReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      syncToServerReq_descriptor_,
      syncToServerReq::default_instance_,
      syncToServerReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(syncToServerReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(syncToServerReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(syncToServerReq));
  syncToServerRsp_descriptor_ = file->message_type(12);
  static const int syncToServerRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(syncToServerRsp, ret_),
  };
  syncToServerRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      syncToServerRsp_descriptor_,
      syncToServerRsp::default_instance_,
      syncToServerRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(syncToServerRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(syncToServerRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(syncToServerRsp));
  electionMasterReq_descriptor_ = file->message_type(13);
  static const int electionMasterReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(electionMasterReq, serinfo_),
  };
  electionMasterReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      electionMasterReq_descriptor_,
      electionMasterReq::default_instance_,
      electionMasterReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(electionMasterReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(electionMasterReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(electionMasterReq));
  electionMasterRsp_descriptor_ = file->message_type(14);
  static const int electionMasterRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(electionMasterRsp, ret_),
  };
  electionMasterRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      electionMasterRsp_descriptor_,
      electionMasterRsp::default_instance_,
      electionMasterRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(electionMasterRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(electionMasterRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(electionMasterRsp));
  daemon_msg_ret_descriptor_ = file->enum_type(0);
  DaemonService_descriptor_ = file->service(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_daemon_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    serverInfo_descriptor_, &serverInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    registerReq_descriptor_, &registerReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    registerRsp_descriptor_, &registerRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    loginOutReq_descriptor_, &loginOutReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    loginOutRsp_descriptor_, &loginOutRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    heartReq_descriptor_, &heartReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    heartRsp_descriptor_, &heartRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    queryServerReq_descriptor_, &queryServerReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    queryServerRsp_descriptor_, &queryServerRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    queryDaemonMasterReq_descriptor_, &queryDaemonMasterReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    queryDaemonMasterRsp_descriptor_, &queryDaemonMasterRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    syncToServerReq_descriptor_, &syncToServerReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    syncToServerRsp_descriptor_, &syncToServerRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    electionMasterReq_descriptor_, &electionMasterReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    electionMasterRsp_descriptor_, &electionMasterRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_daemon_2eproto() {
  delete serverInfo::default_instance_;
  delete serverInfo_reflection_;
  delete registerReq::default_instance_;
  delete registerReq_reflection_;
  delete registerRsp::default_instance_;
  delete registerRsp_reflection_;
  delete loginOutReq::default_instance_;
  delete loginOutReq_reflection_;
  delete loginOutRsp::default_instance_;
  delete loginOutRsp_reflection_;
  delete heartReq::default_instance_;
  delete heartReq_reflection_;
  delete heartRsp::default_instance_;
  delete heartRsp_reflection_;
  delete queryServerReq::default_instance_;
  delete queryServerReq_reflection_;
  delete queryServerRsp::default_instance_;
  delete queryServerRsp_reflection_;
  delete queryDaemonMasterReq::default_instance_;
  delete queryDaemonMasterReq_reflection_;
  delete queryDaemonMasterRsp::default_instance_;
  delete queryDaemonMasterRsp_reflection_;
  delete syncToServerReq::default_instance_;
  delete syncToServerReq_reflection_;
  delete syncToServerRsp::default_instance_;
  delete syncToServerRsp_reflection_;
  delete electionMasterReq::default_instance_;
  delete electionMasterReq_reflection_;
  delete electionMasterRsp::default_instance_;
  delete electionMasterRsp_reflection_;
}

void protobuf_AddDesc_daemon_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014daemon.proto\022\006daemon\"\\\n\nserverInfo\022\n\n\002"
    "ip\030\001 \002(\005\022\014\n\004port\030\002 \002(\005\022\022\n\nservername\030\003 \002"
    "(\t\022\020\n\010serverid\030\004 \002(\003\022\016\n\006extend\030\005 \001(\t\"K\n\013"
    "registerReq\022\n\n\002ip\030\001 \002(\005\022\014\n\004port\030\002 \002(\005\022\022\n"
    "\nservername\030\003 \002(\t\022\016\n\006extend\030\004 \001(\t\"X\n\013reg"
    "isterRsp\022#\n\003ret\030\001 \002(\0162\026.daemon.daemon_ms"
    "g_ret\022\020\n\010serverid\030\002 \002(\003\022\022\n\nservername\030\003 "
    "\002(\t\"3\n\013loginOutReq\022\020\n\010serverid\030\001 \002(\003\022\022\n\n"
    "servername\030\002 \002(\t\"2\n\013loginOutRsp\022#\n\003ret\030\001"
    " \002(\0162\026.daemon.daemon_msg_ret\"0\n\010heartReq"
    "\022\020\n\010serverid\030\001 \002(\003\022\022\n\nservername\030\002 \002(\t\"/"
    "\n\010heartRsp\022#\n\003ret\030\001 \002(\0162\026.daemon.daemon_"
    "msg_ret\"$\n\016queryServerReq\022\022\n\nservername\030"
    "\001 \002(\t\"6\n\016queryServerRsp\022$\n\010serInfos\030\001 \003("
    "\0132\022.daemon.serverInfo\"\026\n\024queryDaemonMast"
    "erReq\";\n\024queryDaemonMasterRsp\022#\n\007serInfo"
    "\030\001 \002(\0132\022.daemon.serverInfo\"6\n\017syncToServ"
    "erReq\022#\n\007serInfo\030\001 \002(\0132\022.daemon.serverIn"
    "fo\"6\n\017syncToServerRsp\022#\n\003ret\030\001 \002(\0162\026.dae"
    "mon.daemon_msg_ret\"8\n\021electionMasterReq\022"
    "#\n\007serInfo\030\001 \002(\0132\022.daemon.serverInfo\"8\n\021"
    "electionMasterRsp\022#\n\003ret\030\001 \002(\0162\026.daemon."
    "daemon_msg_ret*;\n\016daemon_msg_ret\022\006\n\002ok\020\001"
    "\022\010\n\004fail\020\002\022\014\n\010notexist\020\003\022\t\n\005exist\020\0042{\n\rD"
    "aemonService\0224\n\010Register\022\023.daemon.regist"
    "erReq\032\023.daemon.registerRsp\0224\n\010LoginOut\022\023"
    ".daemon.loginOutReq\032\023.daemon.loginOutRsp"
    "B\016B\tDaemonPro\200\001\001", 1096);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "daemon.proto", &protobuf_RegisterTypes);
  serverInfo::default_instance_ = new serverInfo();
  registerReq::default_instance_ = new registerReq();
  registerRsp::default_instance_ = new registerRsp();
  loginOutReq::default_instance_ = new loginOutReq();
  loginOutRsp::default_instance_ = new loginOutRsp();
  heartReq::default_instance_ = new heartReq();
  heartRsp::default_instance_ = new heartRsp();
  queryServerReq::default_instance_ = new queryServerReq();
  queryServerRsp::default_instance_ = new queryServerRsp();
  queryDaemonMasterReq::default_instance_ = new queryDaemonMasterReq();
  queryDaemonMasterRsp::default_instance_ = new queryDaemonMasterRsp();
  syncToServerReq::default_instance_ = new syncToServerReq();
  syncToServerRsp::default_instance_ = new syncToServerRsp();
  electionMasterReq::default_instance_ = new electionMasterReq();
  electionMasterRsp::default_instance_ = new electionMasterRsp();
  serverInfo::default_instance_->InitAsDefaultInstance();
  registerReq::default_instance_->InitAsDefaultInstance();
  registerRsp::default_instance_->InitAsDefaultInstance();
  loginOutReq::default_instance_->InitAsDefaultInstance();
  loginOutRsp::default_instance_->InitAsDefaultInstance();
  heartReq::default_instance_->InitAsDefaultInstance();
  heartRsp::default_instance_->InitAsDefaultInstance();
  queryServerReq::default_instance_->InitAsDefaultInstance();
  queryServerRsp::default_instance_->InitAsDefaultInstance();
  queryDaemonMasterReq::default_instance_->InitAsDefaultInstance();
  queryDaemonMasterRsp::default_instance_->InitAsDefaultInstance();
  syncToServerReq::default_instance_->InitAsDefaultInstance();
  syncToServerRsp::default_instance_->InitAsDefaultInstance();
  electionMasterReq::default_instance_->InitAsDefaultInstance();
  electionMasterRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_daemon_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_daemon_2eproto {
  StaticDescriptorInitializer_daemon_2eproto() {
    protobuf_AddDesc_daemon_2eproto();
  }
} static_descriptor_initializer_daemon_2eproto_;
const ::google::protobuf::EnumDescriptor* daemon_msg_ret_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return daemon_msg_ret_descriptor_;
}
bool daemon_msg_ret_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int serverInfo::kIpFieldNumber;
const int serverInfo::kPortFieldNumber;
const int serverInfo::kServernameFieldNumber;
const int serverInfo::kServeridFieldNumber;
const int serverInfo::kExtendFieldNumber;
#endif  // !_MSC_VER

serverInfo::serverInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void serverInfo::InitAsDefaultInstance() {
}

serverInfo::serverInfo(const serverInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void serverInfo::SharedCtor() {
  _cached_size_ = 0;
  ip_ = 0;
  port_ = 0;
  servername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  serverid_ = GOOGLE_LONGLONG(0);
  extend_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

serverInfo::~serverInfo() {
  SharedDtor();
}

void serverInfo::SharedDtor() {
  if (servername_ != &::google::protobuf::internal::kEmptyString) {
    delete servername_;
  }
  if (extend_ != &::google::protobuf::internal::kEmptyString) {
    delete extend_;
  }
  if (this != default_instance_) {
  }
}

void serverInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* serverInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return serverInfo_descriptor_;
}

const serverInfo& serverInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_daemon_2eproto();
  return *default_instance_;
}

serverInfo* serverInfo::default_instance_ = NULL;

serverInfo* serverInfo::New() const {
  return new serverInfo;
}

void serverInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ip_ = 0;
    port_ = 0;
    if (has_servername()) {
      if (servername_ != &::google::protobuf::internal::kEmptyString) {
        servername_->clear();
      }
    }
    serverid_ = GOOGLE_LONGLONG(0);
    if (has_extend()) {
      if (extend_ != &::google::protobuf::internal::kEmptyString) {
        extend_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool serverInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ip_)));
          set_has_ip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }

      // required int32 port = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_servername;
        break;
      }

      // required string servername = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_servername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_servername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->servername().data(), this->servername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_serverid;
        break;
      }

      // required int64 serverid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_extend;
        break;
      }

      // optional string extend = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extend:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extend()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->extend().data(), this->extend().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void serverInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ip(), output);
  }

  // required int32 port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->port(), output);
  }

  // required string servername = 3;
  if (has_servername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->servername().data(), this->servername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->servername(), output);
  }

  // required int64 serverid = 4;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->serverid(), output);
  }

  // optional string extend = 5;
  if (has_extend()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->extend().data(), this->extend().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->extend(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* serverInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ip = 1;
  if (has_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ip(), target);
  }

  // required int32 port = 2;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->port(), target);
  }

  // required string servername = 3;
  if (has_servername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->servername().data(), this->servername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->servername(), target);
  }

  // required int64 serverid = 4;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->serverid(), target);
  }

  // optional string extend = 5;
  if (has_extend()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->extend().data(), this->extend().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->extend(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int serverInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ip());
    }

    // required int32 port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

    // required string servername = 3;
    if (has_servername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->servername());
    }

    // required int64 serverid = 4;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->serverid());
    }

    // optional string extend = 5;
    if (has_extend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->extend());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void serverInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const serverInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const serverInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void serverInfo::MergeFrom(const serverInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_servername()) {
      set_servername(from.servername());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_extend()) {
      set_extend(from.extend());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void serverInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void serverInfo::CopyFrom(const serverInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool serverInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void serverInfo::Swap(serverInfo* other) {
  if (other != this) {
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(servername_, other->servername_);
    std::swap(serverid_, other->serverid_);
    std::swap(extend_, other->extend_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata serverInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = serverInfo_descriptor_;
  metadata.reflection = serverInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int registerReq::kIpFieldNumber;
const int registerReq::kPortFieldNumber;
const int registerReq::kServernameFieldNumber;
const int registerReq::kExtendFieldNumber;
#endif  // !_MSC_VER

registerReq::registerReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void registerReq::InitAsDefaultInstance() {
}

registerReq::registerReq(const registerReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void registerReq::SharedCtor() {
  _cached_size_ = 0;
  ip_ = 0;
  port_ = 0;
  servername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  extend_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

registerReq::~registerReq() {
  SharedDtor();
}

void registerReq::SharedDtor() {
  if (servername_ != &::google::protobuf::internal::kEmptyString) {
    delete servername_;
  }
  if (extend_ != &::google::protobuf::internal::kEmptyString) {
    delete extend_;
  }
  if (this != default_instance_) {
  }
}

void registerReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* registerReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return registerReq_descriptor_;
}

const registerReq& registerReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_daemon_2eproto();
  return *default_instance_;
}

registerReq* registerReq::default_instance_ = NULL;

registerReq* registerReq::New() const {
  return new registerReq;
}

void registerReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ip_ = 0;
    port_ = 0;
    if (has_servername()) {
      if (servername_ != &::google::protobuf::internal::kEmptyString) {
        servername_->clear();
      }
    }
    if (has_extend()) {
      if (extend_ != &::google::protobuf::internal::kEmptyString) {
        extend_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool registerReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ip_)));
          set_has_ip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }

      // required int32 port = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_servername;
        break;
      }

      // required string servername = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_servername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_servername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->servername().data(), this->servername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_extend;
        break;
      }

      // optional string extend = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extend:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extend()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->extend().data(), this->extend().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void registerReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ip(), output);
  }

  // required int32 port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->port(), output);
  }

  // required string servername = 3;
  if (has_servername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->servername().data(), this->servername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->servername(), output);
  }

  // optional string extend = 4;
  if (has_extend()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->extend().data(), this->extend().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->extend(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* registerReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ip = 1;
  if (has_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ip(), target);
  }

  // required int32 port = 2;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->port(), target);
  }

  // required string servername = 3;
  if (has_servername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->servername().data(), this->servername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->servername(), target);
  }

  // optional string extend = 4;
  if (has_extend()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->extend().data(), this->extend().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->extend(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int registerReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ip());
    }

    // required int32 port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

    // required string servername = 3;
    if (has_servername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->servername());
    }

    // optional string extend = 4;
    if (has_extend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->extend());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void registerReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const registerReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const registerReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void registerReq::MergeFrom(const registerReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_servername()) {
      set_servername(from.servername());
    }
    if (from.has_extend()) {
      set_extend(from.extend());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void registerReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void registerReq::CopyFrom(const registerReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool registerReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void registerReq::Swap(registerReq* other) {
  if (other != this) {
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(servername_, other->servername_);
    std::swap(extend_, other->extend_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata registerReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = registerReq_descriptor_;
  metadata.reflection = registerReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int registerRsp::kRetFieldNumber;
const int registerRsp::kServeridFieldNumber;
const int registerRsp::kServernameFieldNumber;
#endif  // !_MSC_VER

registerRsp::registerRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void registerRsp::InitAsDefaultInstance() {
}

registerRsp::registerRsp(const registerRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void registerRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 1;
  serverid_ = GOOGLE_LONGLONG(0);
  servername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

registerRsp::~registerRsp() {
  SharedDtor();
}

void registerRsp::SharedDtor() {
  if (servername_ != &::google::protobuf::internal::kEmptyString) {
    delete servername_;
  }
  if (this != default_instance_) {
  }
}

void registerRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* registerRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return registerRsp_descriptor_;
}

const registerRsp& registerRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_daemon_2eproto();
  return *default_instance_;
}

registerRsp* registerRsp::default_instance_ = NULL;

registerRsp* registerRsp::New() const {
  return new registerRsp;
}

void registerRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 1;
    serverid_ = GOOGLE_LONGLONG(0);
    if (has_servername()) {
      if (servername_ != &::google::protobuf::internal::kEmptyString) {
        servername_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool registerRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .daemon.daemon_msg_ret ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::daemon::daemon_msg_ret_IsValid(value)) {
            set_ret(static_cast< ::daemon::daemon_msg_ret >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_serverid;
        break;
      }

      // required int64 serverid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_servername;
        break;
      }

      // required string servername = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_servername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_servername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->servername().data(), this->servername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void registerRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .daemon.daemon_msg_ret ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ret(), output);
  }

  // required int64 serverid = 2;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->serverid(), output);
  }

  // required string servername = 3;
  if (has_servername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->servername().data(), this->servername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->servername(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* registerRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .daemon.daemon_msg_ret ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ret(), target);
  }

  // required int64 serverid = 2;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->serverid(), target);
  }

  // required string servername = 3;
  if (has_servername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->servername().data(), this->servername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->servername(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int registerRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .daemon.daemon_msg_ret ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
    }

    // required int64 serverid = 2;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->serverid());
    }

    // required string servername = 3;
    if (has_servername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->servername());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void registerRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const registerRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const registerRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void registerRsp::MergeFrom(const registerRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_servername()) {
      set_servername(from.servername());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void registerRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void registerRsp::CopyFrom(const registerRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool registerRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void registerRsp::Swap(registerRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(serverid_, other->serverid_);
    std::swap(servername_, other->servername_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata registerRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = registerRsp_descriptor_;
  metadata.reflection = registerRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int loginOutReq::kServeridFieldNumber;
const int loginOutReq::kServernameFieldNumber;
#endif  // !_MSC_VER

loginOutReq::loginOutReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void loginOutReq::InitAsDefaultInstance() {
}

loginOutReq::loginOutReq(const loginOutReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void loginOutReq::SharedCtor() {
  _cached_size_ = 0;
  serverid_ = GOOGLE_LONGLONG(0);
  servername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

loginOutReq::~loginOutReq() {
  SharedDtor();
}

void loginOutReq::SharedDtor() {
  if (servername_ != &::google::protobuf::internal::kEmptyString) {
    delete servername_;
  }
  if (this != default_instance_) {
  }
}

void loginOutReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* loginOutReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return loginOutReq_descriptor_;
}

const loginOutReq& loginOutReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_daemon_2eproto();
  return *default_instance_;
}

loginOutReq* loginOutReq::default_instance_ = NULL;

loginOutReq* loginOutReq::New() const {
  return new loginOutReq;
}

void loginOutReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    serverid_ = GOOGLE_LONGLONG(0);
    if (has_servername()) {
      if (servername_ != &::google::protobuf::internal::kEmptyString) {
        servername_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool loginOutReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 serverid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_servername;
        break;
      }

      // required string servername = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_servername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_servername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->servername().data(), this->servername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void loginOutReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 serverid = 1;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->serverid(), output);
  }

  // required string servername = 2;
  if (has_servername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->servername().data(), this->servername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->servername(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* loginOutReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 serverid = 1;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->serverid(), target);
  }

  // required string servername = 2;
  if (has_servername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->servername().data(), this->servername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->servername(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int loginOutReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 serverid = 1;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->serverid());
    }

    // required string servername = 2;
    if (has_servername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->servername());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void loginOutReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const loginOutReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const loginOutReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void loginOutReq::MergeFrom(const loginOutReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_servername()) {
      set_servername(from.servername());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void loginOutReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void loginOutReq::CopyFrom(const loginOutReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool loginOutReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void loginOutReq::Swap(loginOutReq* other) {
  if (other != this) {
    std::swap(serverid_, other->serverid_);
    std::swap(servername_, other->servername_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata loginOutReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = loginOutReq_descriptor_;
  metadata.reflection = loginOutReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int loginOutRsp::kRetFieldNumber;
#endif  // !_MSC_VER

loginOutRsp::loginOutRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void loginOutRsp::InitAsDefaultInstance() {
}

loginOutRsp::loginOutRsp(const loginOutRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void loginOutRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

loginOutRsp::~loginOutRsp() {
  SharedDtor();
}

void loginOutRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void loginOutRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* loginOutRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return loginOutRsp_descriptor_;
}

const loginOutRsp& loginOutRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_daemon_2eproto();
  return *default_instance_;
}

loginOutRsp* loginOutRsp::default_instance_ = NULL;

loginOutRsp* loginOutRsp::New() const {
  return new loginOutRsp;
}

void loginOutRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool loginOutRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .daemon.daemon_msg_ret ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::daemon::daemon_msg_ret_IsValid(value)) {
            set_ret(static_cast< ::daemon::daemon_msg_ret >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void loginOutRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .daemon.daemon_msg_ret ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* loginOutRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .daemon.daemon_msg_ret ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int loginOutRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .daemon.daemon_msg_ret ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void loginOutRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const loginOutRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const loginOutRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void loginOutRsp::MergeFrom(const loginOutRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void loginOutRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void loginOutRsp::CopyFrom(const loginOutRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool loginOutRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void loginOutRsp::Swap(loginOutRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata loginOutRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = loginOutRsp_descriptor_;
  metadata.reflection = loginOutRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int heartReq::kServeridFieldNumber;
const int heartReq::kServernameFieldNumber;
#endif  // !_MSC_VER

heartReq::heartReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void heartReq::InitAsDefaultInstance() {
}

heartReq::heartReq(const heartReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void heartReq::SharedCtor() {
  _cached_size_ = 0;
  serverid_ = GOOGLE_LONGLONG(0);
  servername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

heartReq::~heartReq() {
  SharedDtor();
}

void heartReq::SharedDtor() {
  if (servername_ != &::google::protobuf::internal::kEmptyString) {
    delete servername_;
  }
  if (this != default_instance_) {
  }
}

void heartReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* heartReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return heartReq_descriptor_;
}

const heartReq& heartReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_daemon_2eproto();
  return *default_instance_;
}

heartReq* heartReq::default_instance_ = NULL;

heartReq* heartReq::New() const {
  return new heartReq;
}

void heartReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    serverid_ = GOOGLE_LONGLONG(0);
    if (has_servername()) {
      if (servername_ != &::google::protobuf::internal::kEmptyString) {
        servername_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool heartReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 serverid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_servername;
        break;
      }

      // required string servername = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_servername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_servername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->servername().data(), this->servername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void heartReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 serverid = 1;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->serverid(), output);
  }

  // required string servername = 2;
  if (has_servername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->servername().data(), this->servername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->servername(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* heartReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 serverid = 1;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->serverid(), target);
  }

  // required string servername = 2;
  if (has_servername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->servername().data(), this->servername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->servername(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int heartReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 serverid = 1;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->serverid());
    }

    // required string servername = 2;
    if (has_servername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->servername());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void heartReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const heartReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const heartReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void heartReq::MergeFrom(const heartReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_servername()) {
      set_servername(from.servername());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void heartReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void heartReq::CopyFrom(const heartReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool heartReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void heartReq::Swap(heartReq* other) {
  if (other != this) {
    std::swap(serverid_, other->serverid_);
    std::swap(servername_, other->servername_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata heartReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = heartReq_descriptor_;
  metadata.reflection = heartReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int heartRsp::kRetFieldNumber;
#endif  // !_MSC_VER

heartRsp::heartRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void heartRsp::InitAsDefaultInstance() {
}

heartRsp::heartRsp(const heartRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void heartRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

heartRsp::~heartRsp() {
  SharedDtor();
}

void heartRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void heartRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* heartRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return heartRsp_descriptor_;
}

const heartRsp& heartRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_daemon_2eproto();
  return *default_instance_;
}

heartRsp* heartRsp::default_instance_ = NULL;

heartRsp* heartRsp::New() const {
  return new heartRsp;
}

void heartRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool heartRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .daemon.daemon_msg_ret ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::daemon::daemon_msg_ret_IsValid(value)) {
            set_ret(static_cast< ::daemon::daemon_msg_ret >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void heartRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .daemon.daemon_msg_ret ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* heartRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .daemon.daemon_msg_ret ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int heartRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .daemon.daemon_msg_ret ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void heartRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const heartRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const heartRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void heartRsp::MergeFrom(const heartRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void heartRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void heartRsp::CopyFrom(const heartRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool heartRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void heartRsp::Swap(heartRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata heartRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = heartRsp_descriptor_;
  metadata.reflection = heartRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int queryServerReq::kServernameFieldNumber;
#endif  // !_MSC_VER

queryServerReq::queryServerReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void queryServerReq::InitAsDefaultInstance() {
}

queryServerReq::queryServerReq(const queryServerReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void queryServerReq::SharedCtor() {
  _cached_size_ = 0;
  servername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

queryServerReq::~queryServerReq() {
  SharedDtor();
}

void queryServerReq::SharedDtor() {
  if (servername_ != &::google::protobuf::internal::kEmptyString) {
    delete servername_;
  }
  if (this != default_instance_) {
  }
}

void queryServerReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* queryServerReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return queryServerReq_descriptor_;
}

const queryServerReq& queryServerReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_daemon_2eproto();
  return *default_instance_;
}

queryServerReq* queryServerReq::default_instance_ = NULL;

queryServerReq* queryServerReq::New() const {
  return new queryServerReq;
}

void queryServerReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_servername()) {
      if (servername_ != &::google::protobuf::internal::kEmptyString) {
        servername_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool queryServerReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string servername = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_servername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->servername().data(), this->servername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void queryServerReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string servername = 1;
  if (has_servername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->servername().data(), this->servername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->servername(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* queryServerReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string servername = 1;
  if (has_servername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->servername().data(), this->servername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->servername(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int queryServerReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string servername = 1;
    if (has_servername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->servername());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void queryServerReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const queryServerReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const queryServerReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void queryServerReq::MergeFrom(const queryServerReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_servername()) {
      set_servername(from.servername());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void queryServerReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void queryServerReq::CopyFrom(const queryServerReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool queryServerReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void queryServerReq::Swap(queryServerReq* other) {
  if (other != this) {
    std::swap(servername_, other->servername_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata queryServerReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = queryServerReq_descriptor_;
  metadata.reflection = queryServerReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int queryServerRsp::kSerInfosFieldNumber;
#endif  // !_MSC_VER

queryServerRsp::queryServerRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void queryServerRsp::InitAsDefaultInstance() {
}

queryServerRsp::queryServerRsp(const queryServerRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void queryServerRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

queryServerRsp::~queryServerRsp() {
  SharedDtor();
}

void queryServerRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void queryServerRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* queryServerRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return queryServerRsp_descriptor_;
}

const queryServerRsp& queryServerRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_daemon_2eproto();
  return *default_instance_;
}

queryServerRsp* queryServerRsp::default_instance_ = NULL;

queryServerRsp* queryServerRsp::New() const {
  return new queryServerRsp;
}

void queryServerRsp::Clear() {
  serinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool queryServerRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .daemon.serverInfo serInfos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_serInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_serinfos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_serInfos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void queryServerRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .daemon.serverInfo serInfos = 1;
  for (int i = 0; i < this->serinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->serinfos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* queryServerRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .daemon.serverInfo serInfos = 1;
  for (int i = 0; i < this->serinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->serinfos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int queryServerRsp::ByteSize() const {
  int total_size = 0;

  // repeated .daemon.serverInfo serInfos = 1;
  total_size += 1 * this->serinfos_size();
  for (int i = 0; i < this->serinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->serinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void queryServerRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const queryServerRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const queryServerRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void queryServerRsp::MergeFrom(const queryServerRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  serinfos_.MergeFrom(from.serinfos_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void queryServerRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void queryServerRsp::CopyFrom(const queryServerRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool queryServerRsp::IsInitialized() const {

  for (int i = 0; i < serinfos_size(); i++) {
    if (!this->serinfos(i).IsInitialized()) return false;
  }
  return true;
}

void queryServerRsp::Swap(queryServerRsp* other) {
  if (other != this) {
    serinfos_.Swap(&other->serinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata queryServerRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = queryServerRsp_descriptor_;
  metadata.reflection = queryServerRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

queryDaemonMasterReq::queryDaemonMasterReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void queryDaemonMasterReq::InitAsDefaultInstance() {
}

queryDaemonMasterReq::queryDaemonMasterReq(const queryDaemonMasterReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void queryDaemonMasterReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

queryDaemonMasterReq::~queryDaemonMasterReq() {
  SharedDtor();
}

void queryDaemonMasterReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void queryDaemonMasterReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* queryDaemonMasterReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return queryDaemonMasterReq_descriptor_;
}

const queryDaemonMasterReq& queryDaemonMasterReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_daemon_2eproto();
  return *default_instance_;
}

queryDaemonMasterReq* queryDaemonMasterReq::default_instance_ = NULL;

queryDaemonMasterReq* queryDaemonMasterReq::New() const {
  return new queryDaemonMasterReq;
}

void queryDaemonMasterReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool queryDaemonMasterReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void queryDaemonMasterReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* queryDaemonMasterReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int queryDaemonMasterReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void queryDaemonMasterReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const queryDaemonMasterReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const queryDaemonMasterReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void queryDaemonMasterReq::MergeFrom(const queryDaemonMasterReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void queryDaemonMasterReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void queryDaemonMasterReq::CopyFrom(const queryDaemonMasterReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool queryDaemonMasterReq::IsInitialized() const {

  return true;
}

void queryDaemonMasterReq::Swap(queryDaemonMasterReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata queryDaemonMasterReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = queryDaemonMasterReq_descriptor_;
  metadata.reflection = queryDaemonMasterReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int queryDaemonMasterRsp::kSerInfoFieldNumber;
#endif  // !_MSC_VER

queryDaemonMasterRsp::queryDaemonMasterRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void queryDaemonMasterRsp::InitAsDefaultInstance() {
  serinfo_ = const_cast< ::daemon::serverInfo*>(&::daemon::serverInfo::default_instance());
}

queryDaemonMasterRsp::queryDaemonMasterRsp(const queryDaemonMasterRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void queryDaemonMasterRsp::SharedCtor() {
  _cached_size_ = 0;
  serinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

queryDaemonMasterRsp::~queryDaemonMasterRsp() {
  SharedDtor();
}

void queryDaemonMasterRsp::SharedDtor() {
  if (this != default_instance_) {
    delete serinfo_;
  }
}

void queryDaemonMasterRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* queryDaemonMasterRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return queryDaemonMasterRsp_descriptor_;
}

const queryDaemonMasterRsp& queryDaemonMasterRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_daemon_2eproto();
  return *default_instance_;
}

queryDaemonMasterRsp* queryDaemonMasterRsp::default_instance_ = NULL;

queryDaemonMasterRsp* queryDaemonMasterRsp::New() const {
  return new queryDaemonMasterRsp;
}

void queryDaemonMasterRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_serinfo()) {
      if (serinfo_ != NULL) serinfo_->::daemon::serverInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool queryDaemonMasterRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .daemon.serverInfo serInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_serinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void queryDaemonMasterRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .daemon.serverInfo serInfo = 1;
  if (has_serinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->serinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* queryDaemonMasterRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .daemon.serverInfo serInfo = 1;
  if (has_serinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->serinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int queryDaemonMasterRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .daemon.serverInfo serInfo = 1;
    if (has_serinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->serinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void queryDaemonMasterRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const queryDaemonMasterRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const queryDaemonMasterRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void queryDaemonMasterRsp::MergeFrom(const queryDaemonMasterRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serinfo()) {
      mutable_serinfo()->::daemon::serverInfo::MergeFrom(from.serinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void queryDaemonMasterRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void queryDaemonMasterRsp::CopyFrom(const queryDaemonMasterRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool queryDaemonMasterRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_serinfo()) {
    if (!this->serinfo().IsInitialized()) return false;
  }
  return true;
}

void queryDaemonMasterRsp::Swap(queryDaemonMasterRsp* other) {
  if (other != this) {
    std::swap(serinfo_, other->serinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata queryDaemonMasterRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = queryDaemonMasterRsp_descriptor_;
  metadata.reflection = queryDaemonMasterRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int syncToServerReq::kSerInfoFieldNumber;
#endif  // !_MSC_VER

syncToServerReq::syncToServerReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void syncToServerReq::InitAsDefaultInstance() {
  serinfo_ = const_cast< ::daemon::serverInfo*>(&::daemon::serverInfo::default_instance());
}

syncToServerReq::syncToServerReq(const syncToServerReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void syncToServerReq::SharedCtor() {
  _cached_size_ = 0;
  serinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

syncToServerReq::~syncToServerReq() {
  SharedDtor();
}

void syncToServerReq::SharedDtor() {
  if (this != default_instance_) {
    delete serinfo_;
  }
}

void syncToServerReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* syncToServerReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return syncToServerReq_descriptor_;
}

const syncToServerReq& syncToServerReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_daemon_2eproto();
  return *default_instance_;
}

syncToServerReq* syncToServerReq::default_instance_ = NULL;

syncToServerReq* syncToServerReq::New() const {
  return new syncToServerReq;
}

void syncToServerReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_serinfo()) {
      if (serinfo_ != NULL) serinfo_->::daemon::serverInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool syncToServerReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .daemon.serverInfo serInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_serinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void syncToServerReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .daemon.serverInfo serInfo = 1;
  if (has_serinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->serinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* syncToServerReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .daemon.serverInfo serInfo = 1;
  if (has_serinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->serinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int syncToServerReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .daemon.serverInfo serInfo = 1;
    if (has_serinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->serinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void syncToServerReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const syncToServerReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const syncToServerReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void syncToServerReq::MergeFrom(const syncToServerReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serinfo()) {
      mutable_serinfo()->::daemon::serverInfo::MergeFrom(from.serinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void syncToServerReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void syncToServerReq::CopyFrom(const syncToServerReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool syncToServerReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_serinfo()) {
    if (!this->serinfo().IsInitialized()) return false;
  }
  return true;
}

void syncToServerReq::Swap(syncToServerReq* other) {
  if (other != this) {
    std::swap(serinfo_, other->serinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata syncToServerReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = syncToServerReq_descriptor_;
  metadata.reflection = syncToServerReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int syncToServerRsp::kRetFieldNumber;
#endif  // !_MSC_VER

syncToServerRsp::syncToServerRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void syncToServerRsp::InitAsDefaultInstance() {
}

syncToServerRsp::syncToServerRsp(const syncToServerRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void syncToServerRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

syncToServerRsp::~syncToServerRsp() {
  SharedDtor();
}

void syncToServerRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void syncToServerRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* syncToServerRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return syncToServerRsp_descriptor_;
}

const syncToServerRsp& syncToServerRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_daemon_2eproto();
  return *default_instance_;
}

syncToServerRsp* syncToServerRsp::default_instance_ = NULL;

syncToServerRsp* syncToServerRsp::New() const {
  return new syncToServerRsp;
}

void syncToServerRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool syncToServerRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .daemon.daemon_msg_ret ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::daemon::daemon_msg_ret_IsValid(value)) {
            set_ret(static_cast< ::daemon::daemon_msg_ret >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void syncToServerRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .daemon.daemon_msg_ret ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* syncToServerRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .daemon.daemon_msg_ret ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int syncToServerRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .daemon.daemon_msg_ret ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void syncToServerRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const syncToServerRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const syncToServerRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void syncToServerRsp::MergeFrom(const syncToServerRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void syncToServerRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void syncToServerRsp::CopyFrom(const syncToServerRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool syncToServerRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void syncToServerRsp::Swap(syncToServerRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata syncToServerRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = syncToServerRsp_descriptor_;
  metadata.reflection = syncToServerRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int electionMasterReq::kSerInfoFieldNumber;
#endif  // !_MSC_VER

electionMasterReq::electionMasterReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void electionMasterReq::InitAsDefaultInstance() {
  serinfo_ = const_cast< ::daemon::serverInfo*>(&::daemon::serverInfo::default_instance());
}

electionMasterReq::electionMasterReq(const electionMasterReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void electionMasterReq::SharedCtor() {
  _cached_size_ = 0;
  serinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

electionMasterReq::~electionMasterReq() {
  SharedDtor();
}

void electionMasterReq::SharedDtor() {
  if (this != default_instance_) {
    delete serinfo_;
  }
}

void electionMasterReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* electionMasterReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return electionMasterReq_descriptor_;
}

const electionMasterReq& electionMasterReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_daemon_2eproto();
  return *default_instance_;
}

electionMasterReq* electionMasterReq::default_instance_ = NULL;

electionMasterReq* electionMasterReq::New() const {
  return new electionMasterReq;
}

void electionMasterReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_serinfo()) {
      if (serinfo_ != NULL) serinfo_->::daemon::serverInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool electionMasterReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .daemon.serverInfo serInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_serinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void electionMasterReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .daemon.serverInfo serInfo = 1;
  if (has_serinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->serinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* electionMasterReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .daemon.serverInfo serInfo = 1;
  if (has_serinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->serinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int electionMasterReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .daemon.serverInfo serInfo = 1;
    if (has_serinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->serinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void electionMasterReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const electionMasterReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const electionMasterReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void electionMasterReq::MergeFrom(const electionMasterReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serinfo()) {
      mutable_serinfo()->::daemon::serverInfo::MergeFrom(from.serinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void electionMasterReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void electionMasterReq::CopyFrom(const electionMasterReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool electionMasterReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_serinfo()) {
    if (!this->serinfo().IsInitialized()) return false;
  }
  return true;
}

void electionMasterReq::Swap(electionMasterReq* other) {
  if (other != this) {
    std::swap(serinfo_, other->serinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata electionMasterReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = electionMasterReq_descriptor_;
  metadata.reflection = electionMasterReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int electionMasterRsp::kRetFieldNumber;
#endif  // !_MSC_VER

electionMasterRsp::electionMasterRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void electionMasterRsp::InitAsDefaultInstance() {
}

electionMasterRsp::electionMasterRsp(const electionMasterRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void electionMasterRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

electionMasterRsp::~electionMasterRsp() {
  SharedDtor();
}

void electionMasterRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void electionMasterRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* electionMasterRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return electionMasterRsp_descriptor_;
}

const electionMasterRsp& electionMasterRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_daemon_2eproto();
  return *default_instance_;
}

electionMasterRsp* electionMasterRsp::default_instance_ = NULL;

electionMasterRsp* electionMasterRsp::New() const {
  return new electionMasterRsp;
}

void electionMasterRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool electionMasterRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .daemon.daemon_msg_ret ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::daemon::daemon_msg_ret_IsValid(value)) {
            set_ret(static_cast< ::daemon::daemon_msg_ret >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void electionMasterRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .daemon.daemon_msg_ret ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* electionMasterRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .daemon.daemon_msg_ret ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int electionMasterRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .daemon.daemon_msg_ret ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void electionMasterRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const electionMasterRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const electionMasterRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void electionMasterRsp::MergeFrom(const electionMasterRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void electionMasterRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void electionMasterRsp::CopyFrom(const electionMasterRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool electionMasterRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void electionMasterRsp::Swap(electionMasterRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata electionMasterRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = electionMasterRsp_descriptor_;
  metadata.reflection = electionMasterRsp_reflection_;
  return metadata;
}


// ===================================================================

DaemonService::~DaemonService() {}

const ::google::protobuf::ServiceDescriptor* DaemonService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DaemonService_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* DaemonService::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return DaemonService_descriptor_;
}

void DaemonService::Register(::google::protobuf::RpcController* controller,
                         const ::daemon::registerReq*,
                         ::daemon::registerRsp*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Register() not implemented.");
  done->Run();
}

void DaemonService::LoginOut(::google::protobuf::RpcController* controller,
                         const ::daemon::loginOutReq*,
                         ::daemon::loginOutRsp*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method LoginOut() not implemented.");
  done->Run();
}

void DaemonService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), DaemonService_descriptor_);
  switch(method->index()) {
    case 0:
      Register(controller,
             ::google::protobuf::down_cast<const ::daemon::registerReq*>(request),
             ::google::protobuf::down_cast< ::daemon::registerRsp*>(response),
             done);
      break;
    case 1:
      LoginOut(controller,
             ::google::protobuf::down_cast<const ::daemon::loginOutReq*>(request),
             ::google::protobuf::down_cast< ::daemon::loginOutRsp*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& DaemonService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::daemon::registerReq::default_instance();
    case 1:
      return ::daemon::loginOutReq::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& DaemonService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::daemon::registerRsp::default_instance();
    case 1:
      return ::daemon::loginOutRsp::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

DaemonService_Stub::DaemonService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
DaemonService_Stub::DaemonService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
DaemonService_Stub::~DaemonService_Stub() {
  if (owns_channel_) delete channel_;
}

void DaemonService_Stub::Register(::google::protobuf::RpcController* controller,
                              const ::daemon::registerReq* request,
                              ::daemon::registerRsp* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void DaemonService_Stub::LoginOut(::google::protobuf::RpcController* controller,
                              const ::daemon::loginOutReq* request,
                              ::daemon::loginOutRsp* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace daemon

// @@protoc_insertion_point(global_scope)
